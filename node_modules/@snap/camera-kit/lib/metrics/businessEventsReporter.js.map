{"version":3,"file":"businessEventsReporter.js","sourceRoot":"","sources":["../../src/metrics/businessEventsReporter.ts"],"names":[],"mappings":"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","sourcesContent":["import { v4 } from \"uuid\";\nimport { cameraKitUserAgent as userAgent } from \"../common/cameraKitUserAgent\";\nimport { entries } from \"../common/entries\";\nimport { Injectable } from \"../dependency-injection/Injectable\";\nimport { EventOfType } from \"../events/TypedCustomEvent\";\nimport { EventsFromTarget } from \"../events/TypedEventTarget\";\nimport { FetchHandler } from \"../handlers/defaultFetchHandler\";\nimport { createBatchingHandler } from \"../handlers/batchingHandler\";\nimport { HandlerChainBuilder } from \"../handlers/HandlerChainBuilder\";\nimport { createMappingHandler } from \"../handlers/mappingHandler\";\nimport * as blizzard from \"../generated-proto/blizzard/cameraKitEvents\";\nimport { getLogger } from \"../logger/logger\";\nimport { PageVisibility, pageVisibilityFactory } from \"../common/pageVisibility\";\nimport { CameraKitApiHostname, CameraKitConfiguration, configurationToken } from \"../configuration\";\nimport { metricsHandlerFactory } from \"./metricsHandler\";\nimport { MetricsEventTarget, metricsEventTargetFactory } from \"./metricsEventTarget\";\n\nconst logger = getLogger(\"BusinessEventsReporter\");\n\ntype Nullables<T> = { [K in keyof T]-?: undefined extends T[K] ? K : never }[keyof T];\ntype UndefinedToOptional<T> = Partial<Pick<T, Nullables<T>>> & Omit<T, Nullables<T>>;\n\ntype CameraKitBusinessEvents = EventsFromTarget<MetricsEventTarget>[\"detail\"];\n\ntype MakeBlizzardEvent<E> = Omit<E, \"name\"> & { cameraKitEventBase: blizzard.CameraKitEventBase };\n\ntype CreateEventData<EventType extends EventsFromTarget<MetricsEventTarget>[\"type\"]> = (\n    event: MakeBlizzardEvent<EventOfType<EventType, EventsFromTarget<MetricsEventTarget>>[\"detail\"]>\n) => [string, UndefinedToOptional<blizzard.ServerEventData>];\n\ntype EventHandlers = {\n    [EventType in EventsFromTarget<MetricsEventTarget>[\"type\"]]: CreateEventData<EventType>;\n};\n\n/**\n * Translate between an external metric name, which is exposed to SDK users, and an internal Blizzard event name,\n * property name, and constructor.\n *\n * It is very important that we do this, since the naming of these internal business events are unintuitive and will\n * not make sense to SDK users.\n *\n * For a full list of business events (using their internal names), see:\n * https://docs.google.com/document/d/1-kSzFWCWw9Qo3D08FR1_cqeHTsUtk9p3p3uOptzWDTY/\n */\ntype CameraKitBusinessEventMap = {\n    assetDownload: MakeBusinessEvent<blizzard.CameraKitAssetDownload>;\n    assetValidationFailed: MakeBusinessEvent<blizzard.CameraKitAssetValidationFailed>;\n    benchmarkComplete: MakeBusinessEvent<blizzard.CameraKitWebBenchmarkComplete>;\n    exception: MakeBusinessEvent<blizzard.CameraKitException>;\n    legalPrompt: MakeBusinessEvent<blizzard.CameraKitLegalPrompt>;\n    lensDownload: MakeBusinessEvent<blizzard.CameraKitLensDownload>;\n    lensView: MakeBusinessEvent<blizzard.CameraKitWebLensSwipe>;\n    lensWait: MakeBusinessEvent<blizzard.CameraKitLensSpin>;\n    lensContentValidationFailed: MakeBusinessEvent<blizzard.CameraKitLensContentValidationFailed>;\n    session: MakeBusinessEvent<blizzard.CameraKitSession>;\n};\n\n/**\n * This interface is defined in the CameraKit pb_schema proto definition â€“ but the generated TypeScript does not handle\n * the `Any` type properly. It does not conform to the Proto3 canonical JSON mapping scheme, as defined here:\n * https://developers.google.com/protocol-buffers/docs/proto3#json\n *\n * To solve this (since we only need one message from the CameraKit schema), we'll just manually define the correct\n * interface here.\n */\ninterface SetBusinessEventsRequest {\n    batchEvents: {\n        \"@type\": \"com.snapchat.analytics.blizzard.ServerEventBatch\";\n        serverEvents: blizzard.ServerEvent[];\n    };\n}\n\n// CameraKit's prod metrics endpoint.\n// See: https://github.sc-corp.net/Snapchat/pb_schema/blob/2a966db/proto/camera_kit/v3/service.proto#L133\nconst relativePath = \"/com.snap.camerakit.v3.Metrics/metrics/business_events\";\n\n// It is rather cumbersome to check the actual final size of a batch, but we can easily limit the number of events we\n// include in each batch -- looking at historical data, typical events average ~1.3kb per event. But there are some\n// events (like CAMERA_KIT_EXCEPTION, which includes a stack trace) that can be much larger.\n//\n// To prevent us running over the 64kibibyte limit imposed by browsers on `keep-alive` requests, we'll set quite a low\n// limit to ensure we don't lose events which are larger in size than we expect.\nconst BUSINESS_EVENT_BATCH_MAX_SIZE = 10;\nconst BUSINESS_EVENT_BATCH_MAX_AGE_MS = 5000;\n\nfunction listenAndReport(\n    metricsEventTarget: MetricsEventTarget,\n    metricsHandler: FetchHandler,\n    pageVisibility: PageVisibility,\n    eventHandlers: EventHandlers,\n    apiHostname: CameraKitApiHostname\n): void {\n    const sessionId = v4();\n    logger.log(`Session ID: ${sessionId}`);\n\n    // Blizzard convention is to start the sequenceId at 1.\n    let sequenceId = 1;\n\n    const handler = new HandlerChainBuilder(metricsHandler)\n        .map(\n            createMappingHandler((events: blizzard.ServerEvent[]) => {\n                const body: SetBusinessEventsRequest = {\n                    batchEvents: {\n                        \"@type\": \"com.snapchat.analytics.blizzard.ServerEventBatch\",\n                        serverEvents: events,\n                    },\n                };\n\n                return new Request(`https://${apiHostname}${relativePath}`, {\n                    method: \"POST\",\n                    body: JSON.stringify(body),\n                    credentials: \"include\",\n\n                    // When this is true it makes fetch behave like `Navigator.sendBeacon` â€“ that is, the request\n                    // will still be made even if the page terminates.\n                    // https://developer.mozilla.org/en-US/docs/Web/API/fetch\n                    keepalive: pageVisibility.isDuringVisibilityTransition(\"hidden\"),\n                });\n            }, pageVisibility)\n        )\n        .map(\n            createBatchingHandler({\n                batchReduce: (\n                    previousBundle: blizzard.ServerEvent[] | undefined,\n                    businessEvent: blizzard.ServerEvent\n                ) => {\n                    const bundle = previousBundle ?? [];\n                    bundle.push(businessEvent);\n                    return bundle;\n                },\n                isBatchComplete: (bundle) => bundle.length >= BUSINESS_EVENT_BATCH_MAX_SIZE,\n                maxBatchAge: BUSINESS_EVENT_BATCH_MAX_AGE_MS,\n                pageVisibility,\n            })\n        ).handler;\n\n    const makeBlizzardEvent = <E extends CameraKitBusinessEvents>(event: E): MakeBlizzardEvent<E> => {\n        return {\n            ...event,\n            cameraKitEventBase: blizzard.CameraKitEventBase.fromPartial({\n                kitEventBase: blizzard.KitEventBase.fromPartial({\n                    locale: userAgent.locale,\n                    kitVariant: blizzard.KitType.CAMERA_KIT_WEB,\n                    kitVariantVersion: userAgent.sdkShortVersion,\n                    kitClientTimestampMillis: Date.now(),\n                }),\n                deviceCluster: 0,\n                cameraKitVersion: userAgent.sdkLongVersion,\n                lensCoreVersion: userAgent.lensCoreVersion,\n                deviceModel: userAgent.deviceModel,\n                cameraKitVariant: blizzard.CameraKitVariant.CAMERA_KIT_VARIANT_PARTNER,\n                cameraKitFlavor: blizzard.CameraKitFlavor.CAMERA_KIT_FLAVOR_DEBUG,\n                // We overload appId, using the origin instead because it's nice and human-readable (our backed adds\n                // the true appId as oauth_client_id before forwarding events to Blizzard).\n                appId: userAgent.origin,\n                deviceConnectivity: blizzard.CameraKitConnectivityType.CAMERA_KIT_CONNECTIVITY_TYPE_WIFI,\n                sessionId: sessionId,\n            }),\n        };\n    };\n\n    const sendServerEvent = (\n        eventName: string,\n        eventData: UndefinedToOptional<blizzard.ServerEventData>\n    ): Promise<void> => {\n        return handler(\n            blizzard.ServerEvent.fromPartial({\n                eventName,\n                osType: userAgent.osType,\n                osVersion: userAgent.osVersion,\n                maxSequenceIdOnInstance: 0,\n                sequenceId: sequenceId++,\n                eventData,\n            })\n        );\n    };\n\n    entries(eventHandlers).forEach(([eventType, createEventData]) => {\n        metricsEventTarget.addEventListener(eventType, ({ detail }) => {\n            // Safety: When iterating over object keys in a mapped type, we lose the association between the key type\n            // and the value type â€“ at each iteration, the key type is a union of all possible keys and the value type\n            // is a union of all possible values. When the value is a function with an argument, and that argument\n            // depends on the key type (which is a union), the contravariance of the argument type means that the union\n            // becomes an intersection. In our case here, this means the compiler expects each argument to contain all\n            // properties from all event types. The cast is safe because the mapped `EventHandlers` type ensures that\n            // `createEventData` takes an argument of the type corresponding its key's `eventType`'s event detail.\n            const [eventName, eventData] = createEventData(makeBlizzardEvent(detail) as any);\n            sendServerEvent(eventName, eventData);\n        });\n    });\n}\n\nexport type MakeBusinessEvent<E> = Omit<\n    {\n        [K in keyof E]: Exclude<E[K], undefined> extends Record<keyof any, any>\n            ? MakeBusinessEvent<Exclude<E[K], undefined>>\n            : E[K];\n    },\n    \"cameraKitEventBase\"\n>;\n\nexport type MakeTaggedBusinessEvent<K extends keyof CameraKitBusinessEventMap> = {\n    name: K;\n} & CameraKitBusinessEventMap[K];\n\nexport const businessEventsReporterFactory = Injectable(\n    \"businessEventsReporter\",\n    [\n        metricsEventTargetFactory.token,\n        metricsHandlerFactory.token,\n        pageVisibilityFactory.token,\n        configurationToken,\n    ] as const,\n    (\n        metricsEventTarget: MetricsEventTarget,\n        metricsHandler: FetchHandler,\n        pageVisibility: PageVisibility,\n        configuration: CameraKitConfiguration\n    ) => {\n        /**\n         * This defines a mapping from a business event's external name (the name we document in public API docs), to\n         * its internal representation as a Blizzard ServerEvent.\n         *\n         * It is important that we do this, since the naming of these internal business events are unintuitive and will\n         * not make sense to SDK users.\n         *\n         * To specify the internal event, we must give the ServerEvent's eventName, the specific property name which\n         * contains the event data (this is a \"oneof\" property on ServerEvent), and use the correct event type's\n         * `fromPartial` method (this is generated from the ServerEvent protobuf).\n         *\n         * These events are documented here:\n         * https://docs.google.com/document/d/1-kSzFWCWw9Qo3D08FR1_cqeHTsUtk9p3p3uOptzWDTY/\n         *\n         * They are defined in code here:\n         * https://github.sc-corp.net/Snapchat/snapchat/tree/master/blizzard/schema/blizzard-schema/\n         *  codeGen/src/main/java/com/snapchat/analytics/schema/events/cameraKit\n         */\n        listenAndReport(\n            metricsEventTarget,\n            metricsHandler,\n            pageVisibility,\n            {\n                assetDownload: (event) => [\n                    \"CAMERA_KIT_ASSET_DOWNLOAD\",\n                    { cameraKitAssetDownload: blizzard.CameraKitAssetDownload.fromPartial(event) },\n                ],\n                assetValidationFailed: (event) => [\n                    \"CAMERA_KIT_ASSET_VALIDATION_FAILED\",\n                    { cameraKitAssetValidationFailed: blizzard.CameraKitAssetValidationFailed.fromPartial(event) },\n                ],\n                benchmarkComplete: (event) => [\n                    \"CAMERA_KIT_WEB_BENCHMARK_COMPLETE\",\n                    { cameraKitWebBenchmarkComplete: blizzard.CameraKitWebBenchmarkComplete.fromPartial(event) },\n                ],\n                exception: (event) => [\n                    \"CAMERA_KIT_EXCEPTION\",\n                    { cameraKitException: blizzard.CameraKitException.fromPartial(event) },\n                ],\n                legalPrompt: (event) => [\n                    \"CAMERA_KIT_LEGAL_PROMPT\",\n                    { cameraKitLegalPrompt: blizzard.CameraKitLegalPrompt.fromPartial(event) },\n                ],\n                lensDownload: (event) => [\n                    \"CAMERA_KIT_LENS_DOWNLOAD\",\n                    { cameraKitLensDownload: blizzard.CameraKitLensDownload.fromPartial(event) },\n                ],\n                lensView: (event) => [\n                    \"CAMERA_KIT_WEB_LENS_SWIPE\",\n                    { cameraKitWebLensSwipe: blizzard.CameraKitWebLensSwipe.fromPartial(event) },\n                ],\n                lensWait: (event) => [\n                    \"CAMERA_KIT_LENS_SPIN\",\n                    { cameraKitLensSpin: blizzard.CameraKitLensSpin.fromPartial(event) },\n                ],\n                lensContentValidationFailed: (event) => [\n                    \"CAMERA_KIT_LENS_CONTENT_VALIDATION_FAILED\",\n                    {\n                        cameraKitLensContentValidationFailed:\n                            blizzard.CameraKitLensContentValidationFailed.fromPartial(event),\n                    },\n                ],\n                session: (event) => [\n                    \"CAMERA_KIT_SESSION\",\n                    { cameraKitSession: blizzard.CameraKitSession.fromPartial(event) },\n                ],\n            },\n            configuration.apiHostname\n        );\n    }\n);\n"]}