import { LensCoreModule, Uri, UriCancelRequest, UriRequest, UriResponse } from "../lens-core-module/generated-types";
import { Lens } from "../lens/Lens";
import { LensKeyboard } from "../session/LensKeyboard";
/**
 * Provides a way for a lens to call into external services that work under HTTP-like protocol.
 */
export interface UriHandler {
    /**
     * [scheme]://[route] pattern that this handler processes or an array of patterns.
     */
    uri: Uri | Uri[];
    /**
     * Called to process the provided request.
     * @param request Lens request.
     * @param reply A callback function to send response back.
     * The function can be called none or multiple number of times.
     * @param lens Lens the request is coming from.
     */
    handleRequest(request: UriRequest, reply: (response: UriResponse) => void, lens: Lens): void;
    /**
     * Called to indicated that URI request initated earlier is cancelled.
     * @param request Lens request.
     * @param lens Lens the request is coming from.
     */
    cancelRequest?(request: UriCancelRequest, lens: Lens): void;
}
/**
 * Array of {@link UriHandler} objects.
 */
export type UriHandlers = UriHandler[];
/**
 * An extension point for client URI handlers.
 */
export declare const uriHandlersFactory: {
    (): UriHandlers;
    token: "UriHandlers";
    dependencies: [];
};
/**
 * Registers URI handlers within LensCore.
 * @internal
 */
export declare const registerUriHandlers: {
    (args_0: LensCoreModule, args_1: import("@snap/state-management").StateMachine<import("@snap/state-management").Action<"applyLens", {
        lens: Lens;
        launchParams?: import("..").LensLaunchParams | undefined;
    }> | import("@snap/state-management").Action<"downloadComplete", Lens> | import("@snap/state-management").Action<"turnedOn", Lens> | import("@snap/state-management").Action<"resourcesLoaded", Lens> | import("@snap/state-management").Action<"firstFrameProcessed", Lens> | import("@snap/state-management").Action<"applyLensComplete", Lens> | import("@snap/state-management").Action<"applyLensFailed", {
        error: import("../session/lensState").LensErrors;
        lens: Lens;
    }> | import("@snap/state-management").Action<"applyLensAborted", Lens> | import("@snap/state-management").Action<"removeLens", undefined> | import("@snap/state-management").Action<"turnedOff", Lens> | import("@snap/state-management").Action<"removeLensComplete", undefined> | import("@snap/state-management").Action<"removeLensFailed", Error>, import("@snap/state-management").State<"noLensApplied", undefined> | import("@snap/state-management").State<"applyingLens", Lens> | import("@snap/state-management").State<"lensApplied", Lens>>, args_2: UriHandlers, args_3: LensKeyboard): void;
    token: "registerUriHandlers";
    dependencies: readonly ["lensCore", "lensState", "UriHandlers", "lensKeyboard"];
};
export { Uri, UriCancelRequest, UriRequest, UriResponse } from "../lens-core-module/generated-types";
