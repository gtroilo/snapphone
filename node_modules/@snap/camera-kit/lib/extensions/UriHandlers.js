import { isState } from "@snap/state-management";
import { isArrayBuffer, isArrayOfType, isFunction, isNumber, isRecord, isString, isTypedArray, isUndefined, predicateRecordValues, } from "../common/typeguards";
import { Injectable } from "../dependency-injection/Injectable";
import { lensCoreFactory } from "../lens-core-module";
import { getLogger } from "../logger/logger";
import { lensKeyboardFactory } from "../session/LensKeyboard";
import { lensStateFactory } from "../session/lensState";
const logger = getLogger("UriHandlers");
const SEPARATOR = "://";
function extractSchemeAndRoute(uri) {
    const separatorIndex = uri.indexOf(SEPARATOR);
    const scheme = uri.slice(0, separatorIndex);
    const route = uri.slice(separatorIndex + SEPARATOR.length);
    return [scheme, route];
}
function isUri(value) {
    return isString(value) && value.includes(SEPARATOR);
}
function isUriHandler(value) {
    return (isRecord(value) &&
        (isUri(value.uri) || isArrayOfType(isUri, value.uri)) &&
        isFunction(value.handleRequest) &&
        (isUndefined(value.cancelRequest) || isFunction(value.cancelRequest)));
}
function isUriHandlers(value) {
    return isArrayOfType(isUriHandler, value);
}
function isUriResponse(value) {
    return (isRecord(value) &&
        isNumber(value.code) &&
        isString(value.description) &&
        isString(value.contentType) &&
        (isArrayBuffer(value.data) || isTypedArray(value.data)) &&
        (isUndefined(value.metadata) || predicateRecordValues(isString)(value.metadata)));
}
/**
 * An extension point for client URI handlers.
 */
export const uriHandlersFactory = Injectable("UriHandlers", () => {
    const uriHandlers = [];
    return uriHandlers;
});
/**
 * Registers URI handlers within LensCore.
 * @internal
 */
export const registerUriHandlers = Injectable("registerUriHandlers", [lensCoreFactory.token, lensStateFactory.token, uriHandlersFactory.token, lensKeyboardFactory.token], (lensCore, lensState, userHandlers, lensKeyboard) => {
    if (!isUriHandlers(userHandlers)) {
        throw new Error("Expected an array of UriHandler objects");
    }
    // Users may define UriHandlers using the uriHandlersFactory.token, but we need to add some internally-defined
    // handlers (e.g. lens keyboard handler) before registering handlers with LensCore.
    const allHandlers = userHandlers.concat(lensKeyboard.uriHandler);
    for (const { uri, handleRequest, cancelRequest } of allHandlers) {
        const uris = Array.isArray(uri) ? uri : [uri];
        for (const [scheme, route] of uris.map(extractSchemeAndRoute)) {
            lensCore.registerUriListener(scheme, route, {
                handleRequest: (request) => {
                    const reply = (response) => {
                        if (!isUriResponse(response)) {
                            throw new Error("Expected UriResponse object");
                        }
                        lensCore.provideUriResponse(request.identifier, response);
                    };
                    // Since lenses are the only things that make URI requests, we expect to always be in the
                    // "lensApplied" state â€“ we'll sanity check, though, and log a warning if we're not.
                    const state = lensState.getState();
                    if (isState(state, "noLensApplied")) {
                        logger.warn(`Got a URI request for ${request.uri}, but there is no active lens. The ` +
                            `request will not be processed.`);
                        return;
                    }
                    // NOTE: we do not handle any error thrown on an extension side when handleRequest() is called.
                    // That responsibility is delegated to the extension by design and that is exactly what Android
                    // and iOS SDKs do.
                    handleRequest(request, reply, state.data);
                },
                cancelRequest: (request) => {
                    if (cancelRequest) {
                        const state = lensState.getState();
                        if (isState(state, "noLensApplied")) {
                            logger.warn(`Got a URI cancel request for ${request.uri}, but there is no active ` +
                                `lens. The cancel request will not be processed.`);
                            return;
                        }
                        cancelRequest(request, state.data);
                    }
                },
            });
        }
    }
});
//# sourceMappingURL=UriHandlers.js.map