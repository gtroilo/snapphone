import { __awaiter } from "tslib";
import { simd, exceptions } from "wasm-feature-detect";
import lensCoreWasm from "../../lensCoreWasmVersions.json";
import { loadScript } from "../../common";
import { configurationToken } from "../../configuration";
import { Injectable } from "../../dependency-injection/Injectable";
import { defaultFetchHandlerFactory } from "../../handlers/defaultFetchHandler";
import { getLogger } from "../../logger/logger";
import { cameraKitUserAgent } from "../../common/cameraKitUserAgent";
const logger = getLogger("lensCoreFactory");
const wasmAssets = ["LensCoreWebAssembly.js", "LensCoreWebAssembly.wasm"];
const findMatch = (regex, strings) => strings.find((s) => regex.test(s));
const PlatformFeatures = {
    Default: 0,
    Simd: 0b01,
    Exceptions: 0b10,
};
const platformFeaturesToFlavour = {
    [PlatformFeatures.Exceptions | PlatformFeatures.Simd]: "rel-simd-neh",
    [PlatformFeatures.Simd]: "release-simd",
    [PlatformFeatures.Exceptions]: "rel-neh",
    [PlatformFeatures.Default]: "release",
};
/**
 * Returns a list of URLs for resources which will be fetched during {@link bootstrapCameraKit}.
 *
 * When CameraKit is used on a website, these URLs much be reachable in order for CameraKit to be successfully
 * bootstrapped.
 *
 * @param endpointOverride Optional endpoint override to load the assets from.
 * @returns An array of asset URLs.
 *
 * @category Bootstrapping and Configuration
 */
export function getRequiredBootstrapURLs(endpointOverride) {
    return __awaiter(this, void 0, void 0, function* () {
        // If we have an endpoint override, remove trailing `/` so we can construct a valid URL.
        const endpoint = endpointOverride === null || endpointOverride === void 0 ? void 0 : endpointOverride.replace(/[\/]+$/, "");
        let [simdFeature, exceptionsFeature] = yield Promise.all([
            simd().then((supported) => (supported ? PlatformFeatures.Simd : PlatformFeatures.Default)),
            exceptions().then((supported) => (supported ? PlatformFeatures.Exceptions : PlatformFeatures.Default)),
        ]);
        // Although Safari 16.4 reports SIMD support, LensCore encounters rendering bugs when using SIMD in Safari 16.4.
        // Therefore, we have made the decision to disable SIMD for now until Safari stabilizes the feature.
        const { brand } = cameraKitUserAgent.browser;
        if (brand === "Safari")
            simdFeature = PlatformFeatures.Default;
        const flavor = platformFeaturesToFlavour[simdFeature | exceptionsFeature];
        const version = lensCoreWasm.version;
        const buildNumber = lensCoreWasm.buildNumber;
        return wasmAssets.map((asset) => {
            if (endpoint)
                return `${endpoint}/${asset}`;
            const { origin, pathname, search } = new URL(lensCoreWasm.baseUrl);
            return `${origin}${pathname}/${version}/${buildNumber}/${flavor}/${asset}${search}`;
        });
    });
}
/**
 * This component is responsible for:
 *   1) Loading LensCore WebAssembly (WASM) assets
 *   2) Using the WASM assets to initialize the LensCore WASM module
 *
 * By default, WASM assets will be loaded from the Bolt CDN â€“ but if `endpoint` is provided, assets will be loaded
 * using it as a base URL.
 *
 * @internal
 */
export const lensCoreFactory = Injectable("lensCore", [defaultFetchHandlerFactory.token, configurationToken], (handler, { lensCoreOverrideUrls, wasmEndpointOverride }) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b;
    let lensCoreJS;
    let lensCoreWASM;
    if (lensCoreOverrideUrls) {
        lensCoreJS = lensCoreOverrideUrls.js;
        lensCoreWASM = lensCoreOverrideUrls.wasm;
    }
    else {
        const endpointOverride = wasmEndpointOverride !== null && wasmEndpointOverride !== void 0 ? wasmEndpointOverride : undefined;
        const assetURLs = yield getRequiredBootstrapURLs(endpointOverride);
        lensCoreJS = (_a = findMatch(/\.js/, assetURLs)) !== null && _a !== void 0 ? _a : "";
        lensCoreWASM = (_b = findMatch(/\.wasm/, assetURLs)) !== null && _b !== void 0 ? _b : "";
        if (!lensCoreJS || !lensCoreWASM) {
            throw new Error(`Cannot fetch required LensCore assets. Either the JS or WASM filename is missing from ` +
                `this list: ${assetURLs}.`);
        }
        // Fetching here and creating an Object URL lets LensCore optimized loading itself in a WebWorker,
        // otherwise the glue script would need to be downloaded again.
        const glueScript = yield handler(lensCoreJS).then((r) => r.blob());
        lensCoreJS = URL.createObjectURL(glueScript);
    }
    const scriptElement = yield loadScript(lensCoreJS);
    const lensCore = yield new Promise((resolve, reject) => {
        let initialModule;
        // will trigger WASM initialization and data loading,
        // after completion it will be safe to call imported WASM functions
        // More about emscripten initialization:
        // eslint-disable-next-line max-len
        // https://emscripten.org/docs/getting_started/FAQ.html?highlight=modularize#how-can-i-tell-when-the-page-is-fully-loaded-and-it-is-safe-to-call-compiled-functions
        const moduleInit = globalThis.createLensesModule((initialModule = {
            // url will be used for loading glue JS during Worker inialization
            mainScriptUrlOrBlob: lensCoreJS,
            // will be triggered by Emscripten during the initialization
            instantiateWasm: (importObject, receiveInstance) => {
                WebAssembly.instantiateStreaming(handler(lensCoreWASM), importObject)
                    .then(function ({ instance, module }) {
                    receiveInstance(instance, module);
                    // compiled module will be reused in Worker
                    initialModule.compiledModule = module;
                    resolve(moduleInit);
                })
                    .catch(reject);
            },
        }));
    });
    // now when we have LensCore WASM in memory we can release the script element
    scriptElement.remove();
    // print warning if loaded version differs from hardcoded one
    if (lensCoreWasm.version != `${lensCore.getCoreVersion()}`) {
        logger.warn(`Loaded LensCore version (${lensCore.getCoreVersion()}) differs from expected one (${lensCoreWasm.version})`);
    }
    return lensCore;
}));
//# sourceMappingURL=lensCoreFactory.js.map