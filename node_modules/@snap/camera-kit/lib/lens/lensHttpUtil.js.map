{"version":3,"file":"lensHttpUtil.js","sourceRoot":"","sources":["../../src/lens/lensHttpUtil.ts"],"names":[],"mappings":";AAEA,OAAO,EAAE,kBAAkB,EAAE,WAAW,EAAa,MAAM,QAAQ,CAAC;AAEpE,MAAM,YAAY,GAAG,+BAA+B,CAAC;AAErD,SAAS,YAAY,CAAC,GAAa;IAC/B,OAAO,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;AAC3C,CAAC;AAED,MAAM,UAAgB,qBAAqB,CACvC,UAAwB,EACxB,MAAc,EACd,OAAe,EACf,WAAiC;;QAEjC,MAAM,GAAG,GAAG,WAAW,WAAW,GAAG,YAAY,WAAW,OAAO,WAAW,MAAM,EAAE,CAAC;QACvF,MAAM,QAAQ,GAAG,MAAM,UAAU,CAAC,GAAG,EAAE,EAAE,WAAW,EAAE,SAAS,EAAE,CAAC,CAAC;QACnE,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;QACnC,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QACvB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE;YACpB,MAAM,IAAI,KAAK,CACX,uBAAuB,GAAG,8BAA8B,IAAI,CAAC,SAAS,CAClE,IAAI,CACP,wBAAwB,YAAY,CAAC,QAAQ,CAAC,GAAG,CACrD,CAAC;SACL;QACD,OAAO,IAAI,CAAC;IAChB,CAAC;CAAA;AAED,MAAM,UAAgB,0BAA0B,CAC5C,UAAwB,EACxB,OAAe,EACf,WAAiC;;QAEjC,MAAM,GAAG,GAAG,WAAW,WAAW,GAAG,YAAY,WAAW,OAAO,EAAE,CAAC;QACtE,MAAM,QAAQ,GAAG,MAAM,UAAU,CAAC,GAAG,EAAE,EAAE,WAAW,EAAE,SAAS,EAAE,CAAC,CAAC;QACnE,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;QACnC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,EAAE;YAC3B,MAAM,IAAI,KAAK,CACX,uBAAuB,GAAG,mCAAmC,IAAI,CAAC,SAAS,CACvE,IAAI,CACP,wBAAwB,YAAY,CAAC,QAAQ,CAAC,GAAG,CACrD,CAAC;SACL;QACD,OAAO,IAAI,CAAC,MAAM,CAAC;IACvB,CAAC;CAAA","sourcesContent":["import { CameraKitApiHostname } from \"../configuration\";\nimport { FetchHandler } from \"../handlers/defaultFetchHandler\";\nimport { isGetGroupResponse, isLensProto, LensProto } from \"./Lens\";\n\nconst relativePath = \"/com.snap.camerakit.v3.Lenses\";\n\nfunction getRequestId(res: Response) {\n    return res.headers.get(\"x-request-id\");\n}\n\nexport async function retrieveCameraKitLens(\n    httpClient: FetchHandler,\n    lensId: string,\n    groupId: string,\n    apiHostname: CameraKitApiHostname\n): Promise<LensProto> {\n    const url = `https://${apiHostname}${relativePath}/groups/${groupId}/lenses/${lensId}`;\n    const response = await httpClient(url, { credentials: \"include\" });\n    const body = await response.json();\n    const lens = body.lens;\n    if (!isLensProto(lens)) {\n        throw new Error(\n            `Expected request to ${url} to return a Lens. Got:\\n\\n${JSON.stringify(\n                body\n            )} with request-id of \"${getRequestId(response)}\"`\n        );\n    }\n    return lens;\n}\n\nexport async function retrieveCameraKitLensGroup(\n    httpClient: FetchHandler,\n    groupId: string,\n    apiHostname: CameraKitApiHostname\n): Promise<LensProto[]> {\n    const url = `https://${apiHostname}${relativePath}/groups/${groupId}`;\n    const response = await httpClient(url, { credentials: \"include\" });\n    const body = await response.json();\n    if (!isGetGroupResponse(body)) {\n        throw new Error(\n            `Expected request to ${url} to return a LensGroup. Got:\\n\\n${JSON.stringify(\n                body\n            )} with request-id of \"${getRequestId(response)}\"`\n        );\n    }\n    return body.lenses;\n}\n"]}