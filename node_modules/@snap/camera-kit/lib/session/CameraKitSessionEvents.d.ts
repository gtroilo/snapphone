import { CameraKitSourceError, LensExecutionError, LensImagePickerError } from "../namedErrors";
import { TypedCustomEvent } from "../events/TypedCustomEvent";
import { TypedEventListener } from "../events/TypedEventTarget";
import { Lens } from "../lens";
/**
 * Returns true if given value is of {@link SessionErrors} type and false otherwise.
 */
export declare function isSessionError(value: unknown): value is SessionErrors;
/**
 * Misc errors that occur during CameraKit session.
 * @internal
 */
export type SessionErrors = LensExecutionError | LensImagePickerError | CameraKitSourceError;
/**
 * Events emitted by {@link CameraKitSession.events | CameraKitSession.events}.
 *
 * The following events are emitted:
 *   - `error`: An error has been encountered during lens rendering. May contain an error of type:
 *     - {@link LensExecutionError} If an error of this type occurs, the rendering lens will be automatically removed
 * from the associated CameraKitSession.
 *     - {@link LensImagePickerError}
 *
 * @category Rendering
 * @category Lenses
 */
export type CameraKitSessionEvents = TypedCustomEvent<"error", {
    error: LensExecutionError | LensImagePickerError;
    lens: Lens;
}>;
/**
 * Listener of {@link CameraKitSessionEvents} events.
 */
export type CameraKitSessionEventListener = TypedEventListener<CameraKitSessionEvents>;
