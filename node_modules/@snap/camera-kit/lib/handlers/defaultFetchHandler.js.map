{"version":3,"file":"defaultFetchHandler.js","sourceRoot":"","sources":["../../src/handlers/defaultFetchHandler.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,oCAAoC,CAAC;AAChE,OAAO,EAAE,kBAAkB,EAAE,MAAM,gBAAgB,CAAC;AACpD,OAAO,EAAE,mBAAmB,EAAE,MAAM,uBAAuB,CAAC;AAC5D,OAAO,EAAE,gCAAgC,EAAE,MAAM,8BAA8B,CAAC;AAChF,OAAO,EAAE,qBAAqB,EAAE,MAAM,mBAAmB,CAAC;AAC1D,OAAO,EAAE,oBAAoB,EAAE,MAAM,kBAAkB,CAAC;AAIxD;;;;;;;;GAQG;AAEH,MAAM,CAAC,MAAM,0BAA0B,GAAG,UAAU,CAAC,qBAAqB,EAAE,GAAG,EAAE;IAC7E,OAAO;IACH,2FAA2F;IAC3F,wGAAwG;IACxG,2GAA2G;IAC3G,IAAI,mBAAmB,CAAiD,KAAK,CAAC;SACzE,GAAG,CAAC,kBAAkB,EAAE,CAAC;SACzB,GAAG,CAAC,gCAAgC,EAAE,CAAC;SACvC,GAAG,CAAC,qBAAqB,EAAE,CAAC;QAE7B,sGAAsG;QACtG,yEAAyE;SACxE,GAAG,CAAC,oBAAoB,CAAC,EAAE,OAAO,EAAE,EAAE,GAAG,IAAI,EAAE,CAAC,CAAC,CAAC,OAAO,CACjE,CAAC;AACN,CAAC,CAAC,CAAC","sourcesContent":["import { Injectable } from \"../dependency-injection/Injectable\";\nimport { createDebugHandler } from \"./debugHandler\";\nimport { HandlerChainBuilder } from \"./HandlerChainBuilder\";\nimport { createNoCorsRetryingFetchHandler } from \"./noCorsRetryingFetchHandler\";\nimport { createRetryingHandler } from \"./retryingHandler\";\nimport { createTimeoutHandler } from \"./timeoutHandler\";\n\nexport type FetchHandler<R = Response> = (input: RequestInfo, init?: RequestInit) => Promise<R>;\n\n/**\n * The default Fetch implementation, used to make a simple HTTP requests without any custom headers. This can be passed\n * to `HandlerChainBuilder` to form the basis for other Fetch implementations (e.g. with custom headers, which extract\n * the Response body, etc.)\n *\n * Has support for retries, client-side timeout, and navigating federated auth flows that may not support CORs requests.\n *\n * @internal\n */\n\nexport const defaultFetchHandlerFactory = Injectable(\"defaultFetchHandler\", () => {\n    return (\n        // Safety: We're re-typing fetch's second argument from `init?: RequestInit | undefined` to\n        // `init: RequestInit | void` â€“ this is semantically equivalent, but the void makes for nicer ergonomics\n        // elsewhere (e.g. so that callers can omit the second argument instead of being forced to pass undefined).\n        new HandlerChainBuilder<RequestInfo, Response, RequestInit | undefined>(fetch)\n            .map(createDebugHandler())\n            .map(createNoCorsRetryingFetchHandler())\n            .map(createRetryingHandler())\n\n            // TODO: completely arbitrary timeout -- this should be configurable by consumers, and we should think\n            // about a sane default timeout UX... it's probably less than 10 seconds.\n            .map(createTimeoutHandler({ timeout: 10 * 1000 })).handler\n    );\n});\n"]}